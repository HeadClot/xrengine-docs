(self.webpackChunk_xrengine_docs=self.webpackChunk_xrengine_docs||[]).push([[51826],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return o},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},o=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),k=d(n),u=r,h=k["".concat(s,".").concat(u)]||k[u]||m[u]||l;return n?a.createElement(h,i(i({ref:t},o),{},{components:n})):a.createElement(h,i({ref:t},o))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},79689:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return o}});var a=n(22122),r=n(19756),l=(n(67294),n(3905)),i={id:"particles_interfaces.particlemeshmaterial",title:"Interface: ParticleMeshMaterial",sidebar_label:"ParticleMeshMaterial",custom_edit_url:null},p={unversionedId:"docs-engine/interfaces/particles_interfaces.particlemeshmaterial",id:"docs-engine/interfaces/particles_interfaces.particlemeshmaterial",isDocsHomePage:!1,title:"Interface: ParticleMeshMaterial",description:"particles/interfaces.ParticleMeshMaterial",source:"@site/docs/docs-engine/interfaces/particles_interfaces.particlemeshmaterial.md",sourceDirName:"docs-engine/interfaces",slug:"/docs-engine/interfaces/particles_interfaces.particlemeshmaterial",permalink:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.particlemeshmaterial",editUrl:null,version:"current",sidebar_label:"ParticleMeshMaterial",frontMatter:{id:"particles_interfaces.particlemeshmaterial",title:"Interface: ParticleMeshMaterial",sidebar_label:"ParticleMeshMaterial",custom_edit_url:null},sidebar:"sidebar",previous:{title:"Interface: ParticleMesh",permalink:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.particlemesh"},next:{title:"Interface: Vector",permalink:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.vector"}},s=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Properties",id:"properties",children:[{value:"alphaTest",id:"alphatest",children:[]},{value:"alphaToCoverage",id:"alphatocoverage",children:[]},{value:"blendDst",id:"blenddst",children:[]},{value:"blendDstAlpha",id:"blenddstalpha",children:[]},{value:"blendEquation",id:"blendequation",children:[]},{value:"blendEquationAlpha",id:"blendequationalpha",children:[]},{value:"blendSrc",id:"blendsrc",children:[]},{value:"blendSrcAlpha",id:"blendsrcalpha",children:[]},{value:"blending",id:"blending",children:[]},{value:"clipIntersection",id:"clipintersection",children:[]},{value:"clipShadows",id:"clipshadows",children:[]},{value:"clipping",id:"clipping",children:[]},{value:"clippingPlanes",id:"clippingplanes",children:[]},{value:"colorWrite",id:"colorwrite",children:[]},{value:"defaultAttributeValues",id:"defaultattributevalues",children:[]},{value:"defines",id:"defines",children:[]},{value:"depthFunc",id:"depthfunc",children:[]},{value:"depthTest",id:"depthtest",children:[]},{value:"depthWrite",id:"depthwrite",children:[]},{value:"derivatives",id:"derivatives",children:[]},{value:"dithering",id:"dithering",children:[]},{value:"extensions",id:"extensions",children:[]},{value:"fog",id:"fog",children:[]},{value:"fragmentShader",id:"fragmentshader",children:[]},{value:"glslVersion",id:"glslversion",children:[]},{value:"id",id:"id",children:[]},{value:"index0AttributeName",id:"index0attributename",children:[]},{value:"isMaterial",id:"ismaterial",children:[]},{value:"isShaderMaterial",id:"isshadermaterial",children:[]},{value:"lights",id:"lights",children:[]},{value:"linewidth",id:"linewidth",children:[]},{value:"map",id:"map",children:[]},{value:"morphNormals",id:"morphnormals",children:[]},{value:"morphTargets",id:"morphtargets",children:[]},{value:"name",id:"name",children:[]},{value:"needsUpdate",id:"needsupdate",children:[]},{value:"opacity",id:"opacity",children:[]},{value:"originalMaterial",id:"originalmaterial",children:[]},{value:"polygonOffset",id:"polygonoffset",children:[]},{value:"polygonOffsetFactor",id:"polygonoffsetfactor",children:[]},{value:"polygonOffsetUnits",id:"polygonoffsetunits",children:[]},{value:"precision",id:"precision",children:[]},{value:"premultipliedAlpha",id:"premultipliedalpha",children:[]},{value:"shadowSide",id:"shadowside",children:[]},{value:"side",id:"side",children:[]},{value:"skinning",id:"skinning",children:[]},{value:"stencilFail",id:"stencilfail",children:[]},{value:"stencilFunc",id:"stencilfunc",children:[]},{value:"stencilFuncMask",id:"stencilfuncmask",children:[]},{value:"stencilRef",id:"stencilref",children:[]},{value:"stencilWrite",id:"stencilwrite",children:[]},{value:"stencilWriteMask",id:"stencilwritemask",children:[]},{value:"stencilZFail",id:"stencilzfail",children:[]},{value:"stencilZPass",id:"stencilzpass",children:[]},{value:"toneMapped",id:"tonemapped",children:[]},{value:"transparent",id:"transparent",children:[]},{value:"type",id:"type",children:[]},{value:"uniforms",id:"uniforms",children:[]},{value:"uniformsNeedUpdate",id:"uniformsneedupdate",children:[]},{value:"userData",id:"userdata",children:[]},{value:"uuid",id:"uuid",children:[]},{value:"version",id:"version",children:[]},{value:"vertexColors",id:"vertexcolors",children:[]},{value:"vertexShader",id:"vertexshader",children:[]},{value:"visible",id:"visible",children:[]},{value:"wireframe",id:"wireframe",children:[]},{value:"wireframeLinewidth",id:"wireframelinewidth",children:[]}]},{value:"Methods",id:"methods",children:[{value:"addEventListener",id:"addeventlistener",children:[]},{value:"clone",id:"clone",children:[]},{value:"copy",id:"copy",children:[]},{value:"customProgramCacheKey",id:"customprogramcachekey",children:[]},{value:"dispatchEvent",id:"dispatchevent",children:[]},{value:"dispose",id:"dispose",children:[]},{value:"hasEventListener",id:"haseventlistener",children:[]},{value:"onBeforeCompile",id:"onbeforecompile",children:[]},{value:"removeEventListener",id:"removeeventlistener",children:[]},{value:"setValues",id:"setvalues",children:[]},{value:"toJSON",id:"tojson",children:[]}]}],d={toc:s};function o(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/xrengine-docs/docs/docs-engine/modules/particles_interfaces"},"particles/interfaces"),".ParticleMeshMaterial"),(0,l.kt)("p",null,"Material for particle mesh."),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"ShaderMaterial")),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("strong",{parentName:"p"},"ParticleMeshMaterial")))),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"alphatest"},"alphaTest"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"alphaTest"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"Sets the alpha value to be used when running an alpha test. Default is 0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.alphaTest"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:70"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"alphatocoverage"},"alphaToCoverage"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"alphaToCoverage"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Enables alpha to coverage. Can only be used with MSAA-enabled rendering contexts."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.alphaToCoverage"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:76"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blenddst"},"blendDst"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blendDst"),": BlendingDstFactor"),(0,l.kt)("p",null,"Blending destination. It's one of the blending mode constants defined in Three.js. Default is {@link OneMinusSrcAlphaFactor}."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.OneMinusSrcAlphaFactor"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blendDst"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:82"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blenddstalpha"},"blendDstAlpha"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blendDstAlpha"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"The tranparency of the .blendDst. Default is null."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blendDstAlpha"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:88"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blendequation"},"blendEquation"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blendEquation"),": BlendingEquation"),(0,l.kt)("p",null,"Blending equation to use when applying blending. It's one of the constants defined in Three.js. Default is {@link AddEquation}."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.AddEquation"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blendEquation"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:94"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blendequationalpha"},"blendEquationAlpha"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blendEquationAlpha"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"The tranparency of the .blendEquation. Default is null."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blendEquationAlpha"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:100"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blendsrc"},"blendSrc"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blendSrc"),": BlendingDstFactor ","|"," BlendingSrcFactor"),(0,l.kt)("p",null,"Blending source. It's one of the blending mode constants defined in Three.js. Default is {@link SrcAlphaFactor}."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.SrcAlphaFactor"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blendSrc"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:112"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blendsrcalpha"},"blendSrcAlpha"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blendSrcAlpha"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"The tranparency of the .blendSrc. Default is null."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blendSrcAlpha"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:118"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blending"},"blending"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"blending"),": Blending"),(0,l.kt)("p",null,"Which blending to use when displaying objects with this material. Default is {@link NormalBlending}."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.NormalBlending"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.blending"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:106"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clipintersection"},"clipIntersection"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"clipIntersection"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Changes the behavior of clipping planes so that only their intersection is clipped, rather than their union. Default is false."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.clipIntersection"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:124"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clipshadows"},"clipShadows"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"clipShadows"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Defines whether to clip shadows according to the clipping planes specified on this material. Default is false."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.clipShadows"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:139"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clipping"},"clipping"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"clipping"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.clipping"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:74"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clippingplanes"},"clippingPlanes"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"clippingPlanes"),": ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("p",null,"User-defined clipping planes specified as THREE.Plane objects in world space.\nThese planes apply to the objects this material is attached to.\nPoints in space whose signed distance to the plane is negative are clipped (not rendered).\nSee the WebGL / clipping /intersection example. Default is null."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.clippingPlanes"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:133"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"colorwrite"},"colorWrite"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"colorWrite"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether to render the material's color. This can be used in conjunction with a mesh's .renderOrder property to create invisible objects that occlude other objects. Default is true."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," true"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.colorWrite"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:145"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"defaultattributevalues"},"defaultAttributeValues"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"defaultAttributeValues"),": ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," { 'color': ","[ 1, 1, 1 ]",", 'uv': ","[ 0, 0 ]",", 'uv2': ","[ 0, 0 ]"," }"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.defaultAttributeValues"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:108"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"defines"},"defines"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"defines"),": ",(0,l.kt)("em",{parentName:"p"},"object")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," {}"),(0,l.kt)("h4",{id:"type-declaration"},"Type declaration:"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.defines"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:37"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"depthfunc"},"depthFunc"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"depthFunc"),": DepthModes"),(0,l.kt)("p",null,"Which depth function to use. Default is {@link LessEqualDepth}. See the depth mode constants for all possible values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.LessEqualDepth"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.depthFunc"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:158"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"depthtest"},"depthTest"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"depthTest"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether to have depth test enabled when rendering this material. Default is true."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," true"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.depthTest"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:164"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"depthwrite"},"depthWrite"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"depthWrite"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether rendering this material has any effect on the depth buffer. Default is true.\nWhen drawing 2D overlays it can be useful to disable the depth writing in order to layer several things together without creating z-index artifacts."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," true"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.depthWrite"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:171"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"derivatives"},"derivatives"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"derivatives"),": ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"deprecated"))," Use {@link ShaderMaterial#extensions.derivatives extensions.derivatives} instead."),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.derivatives"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:93"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dithering"},"dithering"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"dithering"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether to apply dithering to the color to remove the appearance of banding. Default is false."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.dithering"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:295"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"extensions"},"extensions"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"extensions"),": ",(0,l.kt)("em",{parentName:"p"},"object")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," { derivatives: false, fragDepth: false, drawBuffers: false, shaderTextureLOD: false }"),(0,l.kt)("h4",{id:"type-declaration-1"},"Type declaration:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"derivatives")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"drawBuffers")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fragDepth")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"shaderTextureLOD")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"boolean"))))),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.extensions"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:98"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"fog"},"fog"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"fog"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.fog"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:64"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"fragmentshader"},"fragmentShader"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"fragmentShader"),": ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.fragmentShader"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:44"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"glslversion"},"glslVersion"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"glslVersion"),": GLSLVersion"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.glslVersion"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:123"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"id"},"id"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"id"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"Unique number of this material instance."),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.id"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:182"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"index0attributename"},"index0AttributeName"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"index0AttributeName"),": ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," undefined"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.index0AttributeName"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:113"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ismaterial"},"isMaterial"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"isMaterial"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"true")),(0,l.kt)("p",null,"Used to check whether this or derived classes are materials. Default is true.\nYou should not change this, as it used internally for optimisation."),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.isMaterial"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:240"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isshadermaterial"},"isShaderMaterial"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"isShaderMaterial"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.isShaderMaterial"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:125"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"lights"},"lights"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"lights"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.lights"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:69"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"linewidth"},"linewidth"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"linewidth"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 1"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.linewidth"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:49"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"map"},"map"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"map"),": ",(0,l.kt)("em",{parentName:"p"},"Texture")),(0,l.kt)("p",null,"Texture of particle"),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/f0a68caaf/packages/engine/src/particles/interfaces/index.ts#L26"},"packages/engine/src/particles/interfaces/index.ts:26")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"morphnormals"},"morphNormals"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"morphNormals"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.morphNormals"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:89"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"morphtargets"},"morphTargets"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"morphTargets"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.morphTargets"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:84"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"name"},"name"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"name"),": ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"Material name. Default is an empty string."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," ''"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.name"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:246"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"needsupdate"},"needsUpdate"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"needsUpdate"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Specifies that the material needs to be updated, WebGL wise. Set it to true if you made changes that need to be reflected in WebGL.\nThis property is automatically set to true when instancing a new material."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.needsUpdate"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:253"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"opacity"},"opacity"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"opacity"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"Opacity. Default is 1."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 1"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.opacity"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:259"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"originalmaterial"},"originalMaterial"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"originalMaterial"),": ",(0,l.kt)("em",{parentName:"p"},"Material")),(0,l.kt)("p",null,"Original material of particle."),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/f0a68caaf/packages/engine/src/particles/interfaces/index.ts#L28"},"packages/engine/src/particles/interfaces/index.ts:28")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"polygonoffset"},"polygonOffset"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"polygonOffset"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether to use polygon offset. Default is false. This corresponds to the POLYGON_OFFSET_FILL WebGL feature."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.polygonOffset"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:265"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"polygonoffsetfactor"},"polygonOffsetFactor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"polygonOffsetFactor"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"Sets the polygon offset factor. Default is 0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.polygonOffsetFactor"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:271"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"polygonoffsetunits"},"polygonOffsetUnits"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"polygonOffsetUnits"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"Sets the polygon offset units. Default is 0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.polygonOffsetUnits"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:277"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"precision"},"precision"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"precision"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"highp"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},'"mediump"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},'"lowp"')),(0,l.kt)("p",null,'Override the renderer\'s default precision for this material. Can be "highp", "mediump" or "lowp". Defaults is null.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.precision"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:283"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"premultipliedalpha"},"premultipliedAlpha"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"premultipliedAlpha"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether to premultiply the alpha (transparency) value. See WebGL / Materials / Transparency for an example of the difference. Default is false."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.premultipliedAlpha"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:289"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"shadowside"},"shadowSide"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"shadowSide"),": Side"),(0,l.kt)("p",null,"Defines which of the face sides will cast shadows. Default is ",(0,l.kt)("em",{parentName:"p"},"null"),".\nIf ",(0,l.kt)("em",{parentName:"p"},"null"),", the value is opposite that of side, above."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," null"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.shadowSide"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:309"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"side"},"side"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"side"),": Side"),(0,l.kt)("p",null,"Defines which of the face sides will be rendered - front, back or both.\nDefault is THREE.FrontSide. Other options are THREE.BackSide and THREE.DoubleSide."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.FrontSide"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.side"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:302"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skinning"},"skinning"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"skinning"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.skinning"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:79"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilfail"},"stencilFail"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilFail"),": StencilOp"),(0,l.kt)("p",null,"Which stencil operation to perform when the comparison function returns false. Default is {@link KeepStencilOp}. See the stencil operation constants for all possible values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.KeepStencilOp"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilFail"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:218"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilfunc"},"stencilFunc"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilFunc"),": StencilFunc"),(0,l.kt)("p",null,"The stencil comparison function to use. Default is {@link AlwaysStencilFunc}. See stencil operation constants for all possible values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.AlwaysStencilFunc"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilFunc"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:194"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilfuncmask"},"stencilFuncMask"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilFuncMask"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"The bit mask to use when comparing against the stencil buffer. Default is ",(0,l.kt)("em",{parentName:"p"},"0xFF"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0xff"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilFuncMask"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:212"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilref"},"stencilRef"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilRef"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"The value to use when performing stencil comparisons or stencil operations. Default is ",(0,l.kt)("em",{parentName:"p"},"0"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilRef"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:200"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilwrite"},"stencilWrite"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilWrite"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether rendering this material has any effect on the stencil buffer. Default is ",(0,l.kt)("em",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilWrite"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:188"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilwritemask"},"stencilWriteMask"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilWriteMask"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"The bit mask to use when writing to the stencil buffer. Default is ",(0,l.kt)("em",{parentName:"p"},"0xFF"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0xff"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilWriteMask"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:206"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilzfail"},"stencilZFail"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilZFail"),": StencilOp"),(0,l.kt)("p",null,"Which stencil operation to perform when the comparison function returns true but the depth test fails.\nDefault is {@link KeepStencilOp}.\nSee the stencil operation constants for all possible values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.KeepStencilOp"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilZFail"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:226"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stencilzpass"},"stencilZPass"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"stencilZPass"),": StencilOp"),(0,l.kt)("p",null,"Which stencil operation to perform when the comparison function returns true and the depth test passes.\nDefault is {@link KeepStencilOp}.\nSee the stencil operation constants for all possible values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," THREE.KeepStencilOp"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.stencilZPass"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:234"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tonemapped"},"toneMapped"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"toneMapped"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Defines whether this material is tone mapped according to the renderer's toneMapping setting.\nDefault is true."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," true"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.toneMapped"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:316"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"transparent"},"transparent"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"transparent"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Overrides: ShaderMaterial.transparent"),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/f0a68caaf/packages/engine/src/particles/interfaces/index.ts#L30"},"packages/engine/src/particles/interfaces/index.ts:30")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"type"},"type"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"type"),": ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 'ShaderMaterial'"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.type"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:32"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"uniforms"},"uniforms"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"uniforms"),": ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("p",null,"Overrides: ShaderMaterial.uniforms"),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/f0a68caaf/packages/engine/src/particles/interfaces/index.ts#L29"},"packages/engine/src/particles/interfaces/index.ts:29")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"uniformsneedupdate"},"uniformsNeedUpdate"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"uniformsNeedUpdate"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.uniformsNeedUpdate"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:118"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"userdata"},"userData"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"userData"),": ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("p",null,"An object that can be used to store custom data about the Material. It should not hold references to functions as these will not be cloned."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," {}"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.userData"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:353"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"uuid"},"uuid"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"uuid"),": ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"UUID of this material instance. This gets automatically assigned, so this shouldn't be edited."),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.uuid"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:335"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"version"},"version"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"version"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,"This starts at 0 and counts how many times .needsUpdate is set to true."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 0"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.version"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:359"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"vertexcolors"},"vertexColors"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"vertexColors"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Defines whether vertex coloring is used. Default is false."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.vertexColors"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:341"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"vertexshader"},"vertexShader"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"vertexShader"),": ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.vertexShader"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:43"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"visible"},"visible"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"visible"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Defines whether this material is visible. Default is true."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," true"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.visible"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:347"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wireframe"},"wireframe"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"wireframe"),": ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," false"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.wireframe"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:54"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wireframelinewidth"},"wireframeLinewidth"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"wireframeLinewidth"),": ",(0,l.kt)("em",{parentName:"p"},"number")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"default"))," 1"),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.wireframeLinewidth"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:59"),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"addeventlistener"},"addEventListener"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"addEventListener"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,l.kt)("em",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"listener"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"event"),": Event) => ",(0,l.kt)("em",{parentName:"p"},"void"),"): ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Adds a listener to an event type."),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of event to listen to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"listener")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"event"),": Event) => ",(0,l.kt)("em",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The function that gets called when the event is fired.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.addEventListener"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/core/EventDispatcher.d.ts:26"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clone"},"clone"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"clone"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.particlemeshmaterial"},(0,l.kt)("em",{parentName:"a"},"ParticleMeshMaterial"))),(0,l.kt)("p",null,"Return a new material with the same parameters as this material."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("a",{parentName:"p",href:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.particlemeshmaterial"},(0,l.kt)("em",{parentName:"a"},"ParticleMeshMaterial"))),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.clone"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:364"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"copy"},"copy"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"copy"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"material"),": ",(0,l.kt)("em",{parentName:"p"},"Material"),"): ",(0,l.kt)("a",{parentName:"p",href:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.particlemeshmaterial"},(0,l.kt)("em",{parentName:"a"},"ParticleMeshMaterial"))),(0,l.kt)("p",null,"Copy the parameters from the passed material into this material."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"material")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"Material"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("a",{parentName:"p",href:"/xrengine-docs/docs/docs-engine/interfaces/particles_interfaces.particlemeshmaterial"},(0,l.kt)("em",{parentName:"a"},"ParticleMeshMaterial"))),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.copy"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:370"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"customprogramcachekey"},"customProgramCacheKey"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"customProgramCacheKey"),"(): ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"In case onBeforeCompile is used, this callback can be used to identify values of settings used in onBeforeCompile, so three.js can reuse a cached shader or recompile the shader as needed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.customProgramCacheKey"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:389"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dispatchevent"},"dispatchEvent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"dispatchEvent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"event"),": { ","[attachment: string]",": ",(0,l.kt)("em",{parentName:"p"},"any"),"; ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,l.kt)("em",{parentName:"p"},"string"),"  }): ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Fire an event type."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"event")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"object"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"event.type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.dispatchEvent"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/core/EventDispatcher.d.ts:46"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dispose"},"dispose"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"dispose"),"(): ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"This disposes the material. Textures of a material don't get disposed. These needs to be disposed by {@link Texture}."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.dispose"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:375"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"haseventlistener"},"hasEventListener"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"hasEventListener"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,l.kt)("em",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"listener"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"event"),": Event) => ",(0,l.kt)("em",{parentName:"p"},"void"),"): ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Checks if listener is added to an event type."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of event to listen to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"listener")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"event"),": Event) => ",(0,l.kt)("em",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The function that gets called when the event is fired.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.hasEventListener"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/core/EventDispatcher.d.ts:33"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"onbeforecompile"},"onBeforeCompile"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"onBeforeCompile"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"shader"),": Shader, ",(0,l.kt)("inlineCode",{parentName:"p"},"renderer"),": ",(0,l.kt)("em",{parentName:"p"},"WebGLRenderer"),"): ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"An optional callback that is executed immediately before the shader program is compiled.\nThis function is called with the shader source code as a parameter.\nUseful for the modification of built-in materials."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"shader")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Shader"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source code of the shader")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"renderer")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"WebGLRenderer")),(0,l.kt)("td",{parentName:"tr",align:"left"},"WebGLRenderer Context that is initializing the material")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.onBeforeCompile"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/Material.d.ts:384"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"removeeventlistener"},"removeEventListener"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"removeEventListener"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),": ",(0,l.kt)("em",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"listener"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"event"),": Event) => ",(0,l.kt)("em",{parentName:"p"},"void"),"): ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Removes a listener from an event type."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the listener that gets removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"listener")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"event"),": Event) => ",(0,l.kt)("em",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The listener function that gets removed.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.removeEventListener"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/core/EventDispatcher.d.ts:40"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setvalues"},"setValues"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setValues"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"parameters"),": ShaderMaterialParameters): ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"parameters")),(0,l.kt)("td",{parentName:"tr",align:"left"},"ShaderMaterialParameters")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"void")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.setValues"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:127"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tojson"},"toJSON"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"toJSON"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"meta"),": ",(0,l.kt)("em",{parentName:"p"},"any"),"): ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"meta")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"any"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"any")),(0,l.kt)("p",null,"Inherited from: ShaderMaterial.toJSON"),(0,l.kt)("p",null,"Defined in: node_modules/@types/three/src/materials/ShaderMaterial.d.ts:128"))}o.isMDXComponent=!0}}]);